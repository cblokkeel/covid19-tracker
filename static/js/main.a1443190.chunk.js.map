{"version":3,"sources":["components/CountriesLeaderboard/CountriesLeaderboard.js","components/InfoCard/InfoCard.js","components/Scroll/Scroll.js","components/SelectCountry/SelectCountry.js","App.js","index.js"],"names":["CountriesLeaderboard","countries","compareValues","countriesSorted","sort","even","className","map","country","countryName","countryTotalCases","InfoCard","type","todayStats","stats","Scroll","props","style","overflowY","height","marginTop","children","SelectCountry","handleSelect","onChange","name","id","value","App","getCountry","a","countryList","fetch","res","json","forEach","push","cases","setState","fetchData","data","todayCases","todayDeaths","todayRecovered","deaths","recovered","fetchDataByCountry","e","selectedCountry","target","key","order","b","hasOwnProperty","varA","toUpperCase","varB","comparison","state","this","onClick","console","log","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1443190.chunk.js","sourcesContent":["import React from 'react'\nimport './CountriesLeaderboard.css'\n\nconst CountriesLeaderboard = ({ countries, compareValues }) => {\n    const countriesSorted = [...countries].sort(compareValues('countryTotalCases', 'desc'))\n    let even = -1\n    \n    return (\n        <div className='leaderboard-container'>\n            {\n                countriesSorted.map(country => {\n                    even++\n                    return <div className={`${even % 2 === 0 ? 'even' : 'odd'} leaderboard-row`}>\n                        <p className='country-info country-name'>{country.countryName} :</p>  <p className='country-info country-cases'>{country.countryTotalCases} Cases</p> \n                    </div>                \n                })\n            }\n        </div>\n    );\n};\n\nexport default CountriesLeaderboard;","import React from 'react'\nimport './InfoCard.css'\n\nconst InfoCard = ({ type, todayStats, stats }) => {\n    return (\n        <div className={`${type} info-card`}>\n            <p className={`${type} card-title`}>Covid-19 <strong>{type}</strong></p>\n            <p className={`${type} today-infos`}>+{todayStats}</p>\n            <p className={`${type} all-time-infos`}>{stats} Total</p>\n        </div>\n    );\n};\n\nexport default InfoCard;","import React from 'react'\nimport './scroll.css'\n\nconst Scroll = props => {\n    return (\n        <div style={{ overflowY: 'scroll', height: '40vh', marginTop: '30px'}} className='scroll'>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React from 'react'\nimport './SelectCountry.css'\n\nconst SelectCountry = ({ countries, handleSelect }) => {\n    return (\n        <div className='select-container'>\n            <select onChange={handleSelect} name=\"countries\" id=\"countries\" className='select'>\n                <option   value='Worldwilde' key='ww'>Worldwilde</option>\n                {   \n                    countries.map(country => {\n                        return <option value={country.countryName} key={country.countryName}>{country.countryName}</option>\n                    })\n                }\n            </select>\n        </div>\n        \n    );\n};\n\nexport default SelectCountry;","import { Component } from 'react'\nimport './App.css'\nimport CountriesLeaderboard from './components/CountriesLeaderboard/CountriesLeaderboard'\nimport InfoCard from './components/InfoCard/InfoCard'\nimport Scroll from './components/Scroll/Scroll'\nimport SelectCountry from './components/SelectCountry/SelectCountry'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      'todayCases': '',\n      'todayDeaths': '',\n      'todayRecovered': '',\n      'cases': '',\n      'deaths': '',\n      'recovered': '',\n      'countries': [],\n      'selectedCountry': ''\n    }\n  }\n\n  getCountry = async () => {\n    const countryList = []\n    const res = await fetch('https://disease.sh/v3/covid-19/countries/')\n    const data = await res.json()\n    data.forEach(country => {\n      countryList.push({\n        'countryName': country.country,\n        'countryTotalCases': country.cases\n      })\n    })\n    this.setState({ countries: countryList })\n  }\n\n  fetchData = async () => {\n    const res = await fetch('https://disease.sh/v3/covid-19/all')\n    const data = await res.json()\n    const { todayCases, todayDeaths, todayRecovered, cases, deaths, recovered } = data\n    this.setState({ todayCases, todayDeaths, todayRecovered, cases, deaths, recovered })\n  }\n  \n  fetchDataByCountry = async country => {\n    if (country === 'Worldwilde') {\n      this.fetchData()\n    } else {\n      const res = await fetch(`https://disease.sh/v3/covid-19/countries/${country}`)\n      const data = await res.json()\n      // console.log(data)\n      const { todayCases, todayDeaths, todayRecovered, cases, deaths, recovered } = data\n      this.setState({ todayCases, todayDeaths, todayRecovered, cases, deaths, recovered })\n    }\n  }\n\n  componentDidMount() {\n    this.getCountry()\n    this.fetchData()\n  }\n\n  handleSelect = e => {\n    this.setState({ selectedCountry: e.target.value })\n    this.fetchDataByCountry(e.target.value)\n  }\n\n  compareValues = (key, order = 'asc') => {\n    return function innerSort(a, b) {\n      if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n        return 0\n      }\n  \n      const varA = (typeof a[key] === 'string')\n        ? a[key].toUpperCase() : a[key]\n      const varB = (typeof b[key] === 'string')\n        ? b[key].toUpperCase() : b[key]\n  \n      let comparison = 0\n      if (varA > varB) {\n        comparison = 1\n      } else if (varA < varB) {\n        comparison = -1\n      }\n      return (\n        (order === 'desc') ? (comparison * -1) : comparison\n      )\n    }\n  }\n  \n  render () {\n    const { todayCases, todayDeaths, todayRecovered, cases, deaths, recovered } = this.state\n    return (\n      <div className=\"App\">\n        <h1 onClick={() => console.log(this.state)}  className='app-title'>Covid-19 tracker</h1>\n        <SelectCountry countries={this.state.countries} handleSelect={this.handleSelect}/>\n        <div className=\"card-container\">\n          <InfoCard type='Cases' todayStats={todayCases} stats={cases}/>\n          <InfoCard type='Recovered' todayStats={todayRecovered} stats={recovered}/>\n          <InfoCard type='Deaths' todayStats={todayDeaths} stats={deaths} />\n        </div>\n        <Scroll >\n          <CountriesLeaderboard  countries={this.state.countries} compareValues={this.compareValues}/>\n        </Scroll>\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}